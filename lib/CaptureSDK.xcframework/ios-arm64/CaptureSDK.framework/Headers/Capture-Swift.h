// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef CAPTURESDK_SWIFT_H
#define CAPTURESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CaptureSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Authentication mode
typedef SWIFT_ENUM(uint8_t, AuthenticationMode, open) {
  AuthenticationModeNone = 0x00,
  AuthenticationModeAes128 = 0x01,
};


/// Main entry point for using Capture
/// 1- get a Capture instance by using CaptureHelper.sharedInstance
/// 2- push a View Controller delegate reference that is compliant to a CaptureHelperDelegate protocol
/// 3- fill a SKTAppInfo with developer ID, bundle ID and AppKey coming from Socket Mobile developer portal
/// 4- open Capture with the SKTAppInfo instance
SWIFT_CLASS("_TtC10CaptureSDK13CaptureHelper")
@interface CaptureHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Capture Helper device, represents a device that is attached to Capture
SWIFT_CLASS("_TtC10CaptureSDK19CaptureHelperDevice")
@interface CaptureHelperDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10CaptureSDK26CaptureHelperDeviceManager")
@interface CaptureHelperDeviceManager : CaptureHelperDevice
@end

/// Communication mode
typedef SWIFT_ENUM(uint8_t, CommMode, open) {
  CommModePlain = 0x00,
  CommModeMACed = 0x01,
  CommModeSecure = 0x03,
};

/// Key Index
typedef SWIFT_ENUM(uint8_t, KeyIndex, open) {
  KeyIndexUser = 0x00,
  KeyIndexAdmin = 0x01,
  KeyIndexNone = 0x02,
};


@class NSString;
@class SCardReader;

/// Represents a channel
/// You can get this object with a call to <code>reader.cardConnect()</code>
/// author:
/// <a href="https://www.springcard.com">SpringCard</a>
/// copyright:
/// <a href="https://www.springcard.com">SpringCard</a>
/// <ul>
///   <li>
///     Version 1.0
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10CaptureSDK12SCardChannel")
@interface SCardChannel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull atrHexa;
/// Points to an <code>SCardReader</code> object
/// remark:
/// read-only
@property (nonatomic, readonly, strong) SCardReader * _Nonnull parent;
/// Was the channel unpowered after the reader went to sleep?
@property (nonatomic, readonly) BOOL isUnpowered;
/// Card’s ATR
/// remark:
/// read-only
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull atr;
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
/// Transmit a C-APDU to the card, receive the R-APDU in response (in the callback)
/// \param command The C-APDU to send to the card
///
///
/// returns:
/// Nothing, answer is available in the <code>onTransmitDidResponse()</code> callback
- (void)transmitWithCommand:(NSArray<NSNumber *> * _Nonnull)command;
/// Disconnect from the card (close the communication channel + power down)
///
/// returns:
/// Nothing, answer is available in the <code>onCardDidDisconnect()</code> callback
- (void)cardDisconnect;
/// Connect to the card again (re-open an existing communication channel
///
/// returns:
/// Nothing, answer is available in the <code>onCardDidConnect()</code> callback
- (void)cardReconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SCardReaderList;

/// Represents a slot
/// You can get this object with a call to <code>SCardReaderList.getReader()</code>
/// remark:
/// This object implements the Equatable protocol
/// author:
/// <a href="https://www.springcard.com">SpringCard</a>
/// copyright:
/// <a href="https://www.springcard.com">SpringCard</a>
/// <ul>
///   <li>
///     Version 1.0
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10CaptureSDK11SCardReader")
@interface SCardReader : NSObject
/// Contains the slot’s index
/// remark:
/// read-only
@property (nonatomic, readonly) NSInteger index;
/// Contains the slot’s name
/// remark:
/// read-only
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Points to an <code>SCardReaderList</code> object
/// remark:
/// read-only
@property (nonatomic, readonly, strong) SCardReaderList * _Null_unspecified parent;
/// Is card powered (by the application) ?
/// remark:
/// read-only
@property (nonatomic, readonly) BOOL cardPowered;
/// Is a card present in the reader (slot) ?
/// remark:
/// read-only
@property (nonatomic, readonly) BOOL cardPresent;
/// Send a direct command to the device
/// \param command The command to send to the reader
///
///
/// returns:
/// Nothing, answer is available in the <code>onControlDidResponse()</code> callback
- (void)controlWithCommand:(NSArray<NSNumber *> * _Nonnull)command;
/// Connect to the card (power up + open a communication channel with the card)
///
/// returns:
/// Nothing, answer is available in the <code>onCardDidConnect()</code> callback
- (void)cardConnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class CBPeripheral;
@class CBCentralManager;
@protocol SCardReaderListDelegate;
@class SecureConnectionParameters;
@class CBService;
@class CBCharacteristic;
@class CBUUID;

/// Main class, instanciate a reader list, manage slots, enable sending APDUs in transmit and control mode, etc
/// author:
/// <a href="https://www.springcard.com">SpringCard</a>
/// copyright:
/// <a href="https://www.springcard.com">SpringCard</a>
/// <ul>
///   <li>
///     Version 1.0
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10CaptureSDK15SCardReaderList")
@interface SCardReaderList : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
/// Represent the vendor’s name
@property (nonatomic, copy) NSString * _Nonnull vendorName;
/// Product’s name
@property (nonatomic, copy) NSString * _Nonnull productName;
/// Device serial number, expressed in hex
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
/// Device serial number of the BLE device
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable serialNumberRaw;
/// Firmware’s version
@property (nonatomic, copy) NSString * _Nonnull firmwareVersion;
/// Hardware version
@property (nonatomic, copy) NSString * _Nonnull hardwareVersion;
/// Software version
@property (nonatomic, copy) NSString * _Nonnull softwareVersion;
@property (nonatomic, copy) NSString * _Nonnull pnpId;
/// Battery level in percentage
@property (nonatomic) NSInteger batteryLevel;
/// Slots count (0 = device is not authentic)
@property (nonatomic) NSInteger slotCount;
/// Name of each slot, if names are equal to an empty string then there was an error
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull slots;
/// Transmit Power Level
@property (nonatomic) NSInteger powerLevel;
/// Battery Power State
@property (nonatomic) NSInteger powerState;
/// Is the reader in low power mode?
@property (nonatomic) BOOL isInLowPowerMode;
/// Value of the last slot status (of the last exchange)
@property (nonatomic, readonly) uint8_t slotStatus;
/// Value of the last slot error (of the last exchange)
@property (nonatomic, readonly) uint8_t slotError;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull libraryName;)
+ (NSString * _Nonnull)libraryName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LibrarySpecial;)
+ (NSString * _Nonnull)LibrarySpecial SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL libraryDebug;)
+ (BOOL)libraryDebug SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull libraryVersion;)
+ (NSString * _Nonnull)libraryVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull libraryVersionMajor;)
+ (NSString * _Nonnull)libraryVersionMajor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull libraryVersionMinor;)
+ (NSString * _Nonnull)libraryVersionMinor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LibraryVersionBuild;)
+ (NSString * _Nonnull)LibraryVersionBuild SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDate * _Nonnull LibraryBuildDate;)
+ (NSDate * _Nonnull)LibraryBuildDate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDate * _Nonnull LibrarycompileDate;)
+ (NSDate * _Nonnull)LibrarycompileDate SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)initWithDevice:(CBPeripheral * _Nonnull)device centralManager:(CBCentralManager * _Nonnull)centralManager delegate:(id <SCardReaderListDelegate> _Nullable)delegate secureConnectionParameters:(SecureConnectionParameters * _Nullable)secureConnectionParameters OBJC_DESIGNATED_INITIALIZER;
- (SCardReader * _Nullable)objectAtIndexedSubscript:(NSInteger)slot SWIFT_WARN_UNUSED_RESULT;
- (SCardReader * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)slot SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// :nodoc:
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// :nodoc:
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// :nodoc:
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// :nodoc:
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// :nodoc:
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
/// :nodoc:
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// Send a direct command to the device
/// \param command The command to send to the reader
///
///
/// returns:
/// Nothing, answer is available in the <code>onControlDidResponse()</code> callback
- (void)controlWithCommand:(NSArray<NSNumber *> * _Nonnull)command;
/// Close connection with the product
/// \param keepBleActive if true then the Bluetooth connection remains active, when false the Bluetooth connection is also closed
///
- (void)closeWithKeepBleActive:(BOOL)keepBleActive;
/// Request for the creation of a PC/SC product <em>over BLE</em>
/// seealso:
/// <code>getAllAdvertisingServices()</code>
/// remark:
/// The instanciation of the CBCentralManager, the scan of BLE peripherals and the connection to the device must be done by the library’s client
/// \param peripheral The peripheral the application is connected to
///
/// \param centralManager The system Central Manager (must be a singleton)
///
/// \param delegate “pointer” to the class that implements the callbacks (usually “self”)
///
/// \param secureConnectionParameters Object of type <code>SecureConnectionParameters</code> used to pass secure communication parameters (optional)
///
///
/// returns:
/// As the code is asynchronous, the onReaderListDidCreate() callback of the delegate will be called in case of success or failure (i.e you need to verify the error parameter)
+ (void)createWithPeripheral:(CBPeripheral * _Nonnull)peripheral centralManager:(CBCentralManager * _Nonnull)centralManager delegate:(id <SCardReaderListDelegate> _Nonnull)delegate secureConnectionParameters:(SecureConnectionParameters * _Nullable)secureConnectionParameters;
/// Get the list of services UUID to filter scan
///
/// returns:
/// array of services UUIDs
+ (NSArray<CBUUID *> * _Nonnull)getAllAdvertisingServices SWIFT_WARN_UNUSED_RESULT;
/// Get the last error code
///
/// returns:
/// Int
- (NSInteger)lastError SWIFT_WARN_UNUSED_RESULT;
/// returns the last error message
///
/// returns:
/// a string describing the problem, can be a message from the system or a message specific to the SpringCard library
- (NSString * _Nonnull)lastErrorMessage SWIFT_WARN_UNUSED_RESULT;
/// Returns the connection status
///
/// returns:
/// true if there is a connection to a BLE device
- (BOOL)connected SWIFT_WARN_UNUSED_RESULT;
/// Is the connection valid?
///
/// returns:
/// Boolean
- (BOOL)valid SWIFT_WARN_UNUSED_RESULT;
/// Get a Reader objet from a slot’s name
/// \param slot name of the slot from the <code>slots</code> property
///
///
/// returns:
/// a <code>Reader</code> object or nil if the slot’s name is unknown
- (SCardReader * _Nullable)getReaderFromStringWithSlot:(NSString * _Nonnull)slot SWIFT_WARN_UNUSED_RESULT;
/// Get a Reader object from a slot’s index
/// \param slot index (0 based) of the slot from the <code>slots</code> property
///
///
/// returns:
/// a <code>Reader</code> object or nil if the index is out of bounds
- (SCardReader * _Nullable)getReaderFromIndexWithSlot:(NSInteger)slot SWIFT_WARN_UNUSED_RESULT;
/// Wake-up the reader, if it is in low power mode.
/// seealso:
/// <code>onReaderListState()</code>
- (void)wakeUp;
/// Ask the device to enter full power-down mode
/// remark:
/// Not all hardware support a full power-down mode. For devices without such capabilities, this instruction is equivalent to a warm reset.
- (void)shutdown;
/// Read device power state & battery level
///
/// returns:
/// Nothing, answer is available in the <code>onPowerInfo()</code> callback
- (void)getPowerInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// All the protocols to implement in the client app
/// author:
/// <a href="https://www.springcard.com">SpringCard</a>
/// copyright:
/// <a href="https://www.springcard.com">SpringCard</a>
/// <ul>
///   <li>
///     Version 1.0
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10CaptureSDK23SCardReaderListDelegate_")
@protocol SCardReaderListDelegate <NSObject>
/// When the SCardReaderListe.create() methods finished its job, this method is called
/// remark:
/// In the callback, the first thing to do is to validate that the error parameter is not nil
/// \param readers in case of success an instance of an object of type <code>SCardReaderList</code>
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onReaderListDidCreateWithReaders:(SCardReaderList * _Nullable)readers error:(NSError * _Nullable)error;
/// When a deconnection from the current connected device is asked or when the device itself disconnect
/// \param readers Object of type <code>SCardReaderList</code>
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onReaderListDidCloseWithReaders:(SCardReaderList * _Nullable)readers error:(NSError * _Nullable)error;
/// When a response is received after a call to <code>SCardReaderList.control()</code>
/// \param readers Object of type <code>SCardReaderList</code>
///
/// \param response a byte array if everything went well or nil in cas of problem.
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onControlDidResponseWithReaders:(SCardReaderList * _Nullable)readers response:(NSArray<NSNumber *> * _Nullable)response error:(NSError * _Nullable)error;
/// When a card is inserted into, or removed from an active reader
/// \param reader Object of type <code>SCardReader</code>
///
/// \param present Is the card present?
///
/// \param powered Is the card powered?
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onReaderStatusWithReader:(SCardReader * _Nullable)reader present:(BOOL)present powered:(BOOL)powered error:(NSError * _Nullable)error;
/// Invoked when the device is going to sleep or waking up
/// \param readers Object of type <code>SCardReaderList</code>
///
/// \param isInLowPowerMode true if the product is going to low power mode, false if it is waking-up
///
- (void)onReaderListStateWithReaders:(SCardReaderList * _Nonnull)readers isInLowPowerMode:(BOOL)isInLowPowerMode;
/// When a R-APDU is received after a call to <code>SCardChannel.transmit()</code>
/// \param channel The channel that sent the C-APUD (object of type <code>SCardChannel</code>), can be nil in case of error
///
/// \param response a byte array if everything went well or nil in case of problem
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onTransmitDidResponseWithChannel:(SCardChannel * _Nullable)channel response:(NSArray<NSNumber *> * _Nullable)response error:(NSError * _Nullable)error;
/// Used to give the result of a <code>SCardReader.cardConnect()</code>
/// \param channel Object of type <code>SCardChannel</code> or nil in case of problem
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onCardDidConnectWithChannel:(SCardChannel * _Nullable)channel error:(NSError * _Nullable)error;
/// Callback used for giving the result of a channel.cardDisconnect()
/// \param channel Object of type <code>SCardChannel</code> or nil in case of problem
///
/// \param error In case of problem this parameter is not nil and contains an error code and message
///
- (void)onCardDidDisconnectWithChannel:(SCardChannel * _Nullable)channel error:(NSError * _Nullable)error;
/// Read device’s power state & battery level
/// \param powerState See https://docs.springcard.com/books/SpringCore/Host_interfaces/BLE/Standard_Services#page_Device-s-power-capabilities-and-states
///
/// \param batteryLevel 0-100%
///
- (void)onPowerInfoWithPowerState:(NSInteger)powerState batteryLevel:(NSInteger)batteryLevel error:(NSError * _Nullable)error;
@end


/// :nodoc:
SWIFT_CLASS("_TtC10CaptureSDK24SCardReaderList_D600_BLE")
@interface SCardReaderList_D600_BLE : SCardReaderList
- (nonnull instancetype)initWithDevice:(CBPeripheral * _Nonnull)device centralManager:(CBCentralManager * _Nonnull)centralManager delegate:(id <SCardReaderListDelegate> _Nullable)delegate secureConnectionParameters:(SecureConnectionParameters * _Nullable)secureConnectionParameters OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC10CaptureSDK31SCardReaderList_PUCK_BLE_Bonded")
@interface SCardReaderList_PUCK_BLE_Bonded : SCardReaderList
- (nonnull instancetype)initWithDevice:(CBPeripheral * _Nonnull)device centralManager:(CBCentralManager * _Nonnull)centralManager delegate:(id <SCardReaderListDelegate> _Nullable)delegate secureConnectionParameters:(SecureConnectionParameters * _Nullable)secureConnectionParameters OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC10CaptureSDK33SCardReaderList_PUCK_BLE_Unbonded")
@interface SCardReaderList_PUCK_BLE_Unbonded : SCardReaderList
- (BOOL)isBoundedDevice SWIFT_WARN_UNUSED_RESULT;
- (void)setSpecificDeviceServices;
- (nonnull instancetype)initWithDevice:(CBPeripheral * _Nonnull)device centralManager:(CBCentralManager * _Nonnull)centralManager delegate:(id <SCardReaderListDelegate> _Nullable)delegate secureConnectionParameters:(SecureConnectionParameters * _Nullable)secureConnectionParameters OBJC_DESIGNATED_INITIALIZER;
@end


/// Parameters used to describe a secure connection
SWIFT_CLASS("_TtC10CaptureSDK26SecureConnectionParameters")
@interface SecureConnectionParameters : NSObject
- (nonnull instancetype)initWithAuthMode:(enum AuthenticationMode)authMode keyIndex:(enum KeyIndex)keyIndex keyValue:(NSArray<NSNumber *> * _Nonnull)keyValue commMode:(enum CommMode)commMode debugSecureCommunication:(BOOL)debugSecureCommunication OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10CaptureSDK9SktLogger")
@interface SktLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIViewController;

SWIFT_CLASS("_TtC10CaptureSDK24SocketCamControllerSwift")
@interface SocketCamControllerSwift : NSObject
@property (nonatomic, readonly) BOOL isBeepFilePresent;
@property (nonatomic, strong) UIViewController * _Nullable parent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)startScanWith:(BOOL)continousScan SWIFT_WARN_UNUSED_RESULT;
- (BOOL)stopScan SWIFT_WARN_UNUSED_RESULT;
- (void)turnFlashWith:(BOOL)turnOn;
- (void)setBeepWith:(BOOL)beepOn;
- (void)setVibrateWith:(BOOL)vibrateOn;
- (void)updateDataSourceStatusWith:(NSInteger)status with:(NSInteger)dataSourceIndex;
- (NSInteger)getDataSourcesCount SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDataSourceTypeFrom:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getDataSourceIndexFrom:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDataSourceNameFrom:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDataSourceDescriptionFrom:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)retrieveDataSourceIdFrom:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
@end


/// Builtin SocketCam delegate
/// This delegate is used when we receive notification from
/// iOS SocketCam
SWIFT_PROTOCOL("_TtP10CaptureSDK17SocketCamDelegate_")
@protocol SocketCamDelegate
- (void)didRead:(NSString * _Nonnull)barcode ofType:(NSString * _Nonnull)type;
- (void)didNotRead;
- (NSArray * _Nonnull)buildDataSourceEnabledList SWIFT_WARN_UNUSED_RESULT;
@end


@interface SocketCamControllerSwift (SWIFT_EXTENSION(CaptureSDK)) <SocketCamDelegate>
- (void)didRead:(NSString * _Nonnull)barcode ofType:(NSString * _Nonnull)type;
- (void)didNotRead;
- (NSArray * _Nonnull)buildDataSourceEnabledList SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
